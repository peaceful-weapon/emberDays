minispade.register('ember-inflector/~tests/system/inflector_test', "(function() {var inflector;\nmodule('ember-inflector.dsl', {\n  setup: function() {\n    inflector = new Ember.Inflector(/* no rulest == no rules */);\n  },\n  teardown: function() {\n    inflector = undefined;\n  }\n});\n\ntest('ability to add additonal pluralization rules', function(){\n  equal(inflector.pluralize('cow'), 'cow', 'no pluralization rule');\n\n  inflector.plural(/$/, 's');\n\n  equal(inflector.pluralize('cow'), 'cows', 'pluralization rule was applied');\n});\n\ntest('ability to add additonal singularization rules', function(){\n  equal(inflector.singularize('cows'), 'cows', 'no singularization rule was applied');\n\n  inflector.singular(/s$/, '');\n\n  equal(inflector.singularize('cows'), 'cow', 'singularization rule was applied');\n});\n\ntest('ability to add additonal uncountable rules', function(){\n  inflector.plural(/$/, 's');\n  equal(inflector.pluralize('cow'), 'cows', 'pluralization rule was applied');\n\n  inflector.uncountable('cow');\n  equal(inflector.pluralize('cow'), 'cow', 'pluralization rule NOT was applied');\n});\n\ntest('ability to add additonal irregular rules', function(){\n  inflector.singular(/s$/, '');\n  inflector.plural(/$/, 's');\n\n  equal(inflector.singularize('cows'), 'cow', 'regular singularization rule was applied');\n  equal(inflector.pluralize('cow'), 'cows', 'regular pluralization rule was applied');\n\n  inflector.irregular('cow', 'kine');\n\n  equal(inflector.singularize('kine'), 'cow', 'irregular singularization rule was applied');\n  equal(inflector.pluralize('cow'), 'kine', 'irregular pluralization rule was applied');\n});\n\nmodule('ember-inflector.unit');\n\ntest('plurals', function() {\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plurals: [\n      [/$/, 's'],\n      [/s$/i, 's']\n    ]\n  });\n\n  equal(inflector.pluralize('apple'), 'apples');\n});\n\ntest('singularization',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    singular: [\n      [/s$/i, ''],\n      [/(ss)$/i, '$1']\n    ]\n  });\n\n  equal(inflector.singularize('apple'), 'apple');\n});\n\ntest('singularization of irregulars', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    irregularPairs: [\n      ['person', 'people']\n    ]\n  });\n\n  equal(inflector.singularize('person'), 'person');\n});\n\ntest('plural',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plurals: [\n      ['1', '1'],\n      ['2', '2'],\n      ['3', '3']\n    ]\n  });\n\n  equal(inflector.rules.plurals.length, 3);\n});\n\ntest('singular',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    singular: [\n      ['1', '1'],\n      ['2', '2'],\n      ['3', '3']\n    ]\n  });\n\n  equal(inflector.rules.singular.length, 3);\n});\n\ntest('irregular',function(){\n  expect(6);\n\n  var inflector = new Ember.Inflector({\n    irregularPairs: [\n      ['1', '12'],\n      ['2', '22'],\n      ['3', '32']\n    ]\n  });\n\n  equal(inflector.rules.irregular['1'], '12');\n  equal(inflector.rules.irregular['2'], '22');\n  equal(inflector.rules.irregular['3'], '32');\n\n  equal(inflector.rules.irregularInverse['12'], '1');\n  equal(inflector.rules.irregularInverse['22'], '2');\n  equal(inflector.rules.irregularInverse['32'], '3');\n});\n\ntest('uncountable',function(){\n  expect(3);\n\n  var inflector = new Ember.Inflector({\n    uncountable: [\n      '1',\n      '2',\n      '3'\n    ]\n  });\n\n  equal(inflector.rules.uncountable['1'], true);\n  equal(inflector.rules.uncountable['2'], true);\n  equal(inflector.rules.uncountable['3'], true);\n});\n\ntest('inflect.nothing', function(){\n  expect(2);\n\n  var inflector = new Ember.Inflector();\n\n  equal(inflector.inflect('',  []), '');\n  equal(inflector.inflect(' ', []), ' ');\n});\n\ntest('inflect.noRules',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n\n  equal(inflector.inflect('word', []),'word');\n});\n\ntest('inflect.uncountable', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plural: [\n      [/$/,'s']\n    ],\n    uncountable: [\n      'word'\n    ]\n  });\n\n  var rules = [];\n\n  equal(inflector.inflect('word', rules), 'word');\n});\n\ntest('inflect.irregular', function(){\n  expect(2);\n\n  var inflector = new Ember.Inflector({\n    irregularPairs: [\n      ['word', 'wordy']\n    ]\n  });\n\n  var rules = [];\n\n  equal(inflector.inflect('word', rules, inflector.rules.irregular), 'wordy');\n  equal(inflector.inflect('wordy', rules, inflector.rules.irregularInverse), 'word');\n});\n\ntest('inflect.basicRules', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n  var rules = [[/$/, 's']];\n\n  equal(inflector.inflect('word', rules ), 'words');\n});\n\ntest('inflect.advancedRules', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n  var rules = [[/^(ox)$/i, '$1en']];\n\n  equal(inflector.inflect('ox', rules), 'oxen');\n});\n\n})();\n//@ sourceURL=ember-inflector/~tests/system/inflector_test");