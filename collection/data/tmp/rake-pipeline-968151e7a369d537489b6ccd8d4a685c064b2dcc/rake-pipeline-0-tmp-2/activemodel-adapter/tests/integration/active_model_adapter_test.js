minispade.register('activemodel-adapter/~tests/integration/active_model_adapter_test', "(function() {var env, store, adapter, SuperUser;\nvar originalAjax, passedUrl, passedVerb, passedHash;\nmodule(\"integration/active_model_adapter - AMS Adapter\", {\n  setup: function() {\n    SuperUser = DS.Model.extend();\n\n    env = setupStore({\n      superUser: SuperUser,\n      adapter: DS.ActiveModelAdapter\n    });\n\n    store = env.store;\n    adapter = env.adapter;\n\n    passedUrl = passedVerb = passedHash = null;\n  }\n});\n\nfunction ajaxResponse(value) {\n  adapter.ajax = function(url, verb, hash) {\n    passedUrl = url;\n    passedVerb = verb;\n    passedHash = hash;\n\n    return Ember.RSVP.resolve(value);\n  };\n}\n\ntest('buildURL - decamelizes names', function() {\n  equal(adapter.buildURL('superUser', 1), \"/super_users/1\");\n});\n\ntest('ajaxError - returns invalid error if 422 response', function() {\n  var error = new DS.InvalidError({ name: \"can't be blank\" });\n\n  var jqXHR = {\n    status: 422,\n    responseText: JSON.stringify({ errors: { name: \"can't be blank\" } })\n  };\n\n  equal(adapter.ajaxError(jqXHR), error.toString());\n});\n\ntest('ajaxError - invalid error has camelized keys', function() {\n  var error = new DS.InvalidError({ firstName: \"can't be blank\" });\n\n  var jqXHR = {\n    status: 422,\n    responseText: JSON.stringify({ errors: { first_name: \"can't be blank\" } })\n  };\n\n  equal(adapter.ajaxError(jqXHR), error.toString());\n});\n\ntest('ajaxError - returns ajax response if not 422 response', function() {\n  var jqXHR = {\n    status: 500,\n    responseText: \"Something went wrong\"\n  };\n\n  equal(adapter.ajaxError(jqXHR), jqXHR);\n});\n\n})();\n//@ sourceURL=activemodel-adapter/~tests/integration/active_model_adapter_test");