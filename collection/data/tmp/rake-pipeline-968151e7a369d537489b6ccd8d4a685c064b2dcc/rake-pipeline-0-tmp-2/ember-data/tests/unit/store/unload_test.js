minispade.register('ember-data/~tests/unit/store/unload_test', "(function() {var get = Ember.get, set = Ember.set;\nvar store, tryToFind, Record;\n\nmodule(\"unit/store/unload - Store unloading records\", {\n  setup: function() {\n    store = createStore({ adapter: DS.Adapter.extend({\n        find: function(store, type, id) {\n          tryToFind = true;\n          return Ember.RSVP.resolve({ id: id, wasFetched: true });\n        }\n      })\n    });\n\n    Record = DS.Model.extend({\n      title: DS.attr('string')\n    });\n  },\n\n  teardown: function() {\n    store.destroy();\n  }\n});\n\ntest(\"unload a dirty record\", function() {\n  store.push(Record, {id: 1, title: 'toto'});\n\n  store.find(Record, 1).then(async(function(record) {\n    record.set('title', 'toto2');\n\n    equal(get(record, 'isDirty'), true, \"record is dirty\");\n    expectAssertion(function() {\n      record.unloadRecord();\n    }, \"You can only unload a loaded, non-dirty record.\", \"can not unload dirty record\");\n  }));\n});\n\ntest(\"unload a record\", function() {\n  store.push(Record, {id: 1, title: 'toto'});\n\n  store.find(Record, 1).then(async(function(record) {\n    equal(get(record, 'id'), 1, \"found record with id 1\");\n    equal(get(record, 'isDirty'), false, \"record is not dirty\");\n\n    store.unloadRecord(record);\n\n    equal(get(record, 'isDirty'), false, \"record is not dirty\");\n    equal(get(record, 'isDeleted'), true, \"record is deleted\");\n\n    tryToFind = false;\n    store.find(Record, 1);\n    equal(tryToFind, true, \"not found record with id 1\");\n  }));\n});\n\nmodule(\"DS.Store - unload record with relationships\");\n\ntest(\"can commit store after unload record with relationships\", function() {\n  store = createStore({ adapter: DS.Adapter.extend({\n      find: function() {\n        return Ember.RSVP.resolve({ id: 1, description: 'cuisinart', brand: 1 });\n      },\n      createRecord: function(store, type, record) {\n        return Ember.RSVP.resolve();\n      }\n    })\n  });\n\n  var like, product, brand;\n\n  var Brand = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  var Product = DS.Model.extend({\n    description: DS.attr('string'),\n    brand: DS.belongsTo(Brand)\n  });\n\n  var Like = DS.Model.extend({\n    product: DS.belongsTo(Product)\n  });\n\n  store.push(Brand, { id: 1, name: 'EmberJS' });\n  store.push(Product, { id: 1, description: 'toto', brand: 1 });\n\n  var asyncRecords = Ember.RSVP.hash({\n    brand: store.find(Brand, 1),\n    product: store.find(Product, 1)\n  });\n\n  asyncRecords.then(async(function(records) {\n    like = store.createRecord(Like, { id: 1, product: product });\n    records.like = like.save();\n    return Ember.RSVP.hash(records);\n  })).then(async(function(records) {\n    store.unloadRecord(records.product);\n\n    return store.find(Product, 1);\n  })).then(async(function(product) {\n    equal(product.get('description'), 'cuisinart', \"The record was unloaded and the adapter's `find` was called\");\n    store.destroy();\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/unit/store/unload_test");