minispade.register('ember-data/~tests/unit/model/merge_test', "(function() {var Person;\n\nmodule(\"unit/model/merge - Merging\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      name: DS.attr(),\n      city: DS.attr()\n    });\n  },\n\n  teardown: function() {\n\n  }\n});\n\ntest(\"When a record is in flight, changes can be made\", function() {\n  var adapter = DS.Adapter.extend({\n    createRecord: function(store, type, record) {\n      return Ember.RSVP.resolve({ id: 1, name: \"Tom Dale\" });\n    }\n  });\n\n  var store = createStore({ adapter: adapter });\n\n  var person = store.createRecord(Person, { name: \"Tom Dale\" });\n\n  // Make sure saving isn't resolved synchronously\n  Ember.run(function() {\n    var promise = person.save();\n\n    equal(person.get('name'), \"Tom Dale\");\n\n    person.set('name', \"Thomas Dale\");\n\n    promise.then(function(person) {\n      equal(person.get('isDirty'), true, \"The person is still dirty\");\n      equal(person.get('name'), \"Thomas Dale\", \"The changes made still apply\");\n    });\n  });\n});\n\ntest(\"When a record is in flight, pushes are applied underneath the in flight changes\", function() {\n  var adapter = DS.Adapter.extend({\n    updateRecord: function(store, type, record) {\n      return Ember.RSVP.resolve({ id: 1, name: \"Senor Thomas Dale, Esq.\", city: \"Portland\" });\n    }\n  });\n\n  var store = createStore({ adapter: adapter });\n\n  var person = store.push(Person, { id: 1, name: \"Tom\" });\n  person.set('name', \"Thomas Dale\");\n\n  // Make sure saving isn't resolved synchronously\n  Ember.run(function() {\n    var promise = person.save();\n\n    equal(person.get('name'), \"Thomas Dale\");\n\n    person.set('name', \"Tomasz Dale\");\n\n    store.push(Person, { id: 1, name: \"Tommy Dale\", city: \"PDX\" });\n\n    equal(person.get('name'), \"Tomasz Dale\", \"the local changes applied on top\");\n    equal(person.get('city'), \"PDX\", \"the pushed change is available\");\n\n    promise.then(function(person) {\n      equal(person.get('isDirty'), true, \"The person is still dirty\");\n      equal(person.get('name'), \"Tomasz Dale\", \"The local changes apply\");\n      equal(person.get('city'), \"Portland\", \"The updates from the server apply on top of the previous pushes\");\n    });\n  });\n});\n\ntest(\"When a record is dirty, pushes are overridden by local changes\", function() {\n  var store = createStore({ adapter: DS.Adapter });\n\n  var person = store.push(Person, { id: 1, name: \"Tom Dale\", city: \"San Francisco\" });\n\n  person.set('name', \"Tomasz Dale\");\n\n  equal(person.get('isDirty'), true, \"the person is currently dirty\");\n  equal(person.get('name'), \"Tomasz Dale\", \"the update was effective\");\n  equal(person.get('city'), \"San Francisco\", \"the original data applies\");\n\n  store.push(Person, { id: 1, name: \"Thomas Dale\", city: \"Portland\" });\n\n  equal(person.get('isDirty'), true, \"the local changes are reapplied\");\n  equal(person.get('name'), \"Tomasz Dale\", \"the local changes are reapplied\");\n  equal(person.get('city'), \"Portland\", \"if there are no local changes, the new data applied\");\n});\n\ntest(\"A record with no changes can still be saved\", function() {\n  var adapter = DS.Adapter.extend({\n    updateRecord: function(store, type, record) {\n      return Ember.RSVP.resolve({ id: 1, name: \"Thomas Dale\" });\n    }\n  });\n\n  var store = createStore({ adapter: adapter });\n\n  var person = store.push(Person, { id: 1, name: \"Tom Dale\" });\n\n  person.save().then(async(function() {\n    equal(person.get('name'), \"Thomas Dale\", \"the updates occurred\");\n  }));\n});\n\ntest(\"A dirty record can be reloaded\", function() {\n  var adapter = DS.Adapter.extend({\n    find: function(store, type, id) {\n      return Ember.RSVP.resolve({ id: 1, name: \"Thomas Dale\", city: \"Portland\" });\n    }\n  });\n\n  var store = createStore({ adapter: adapter });\n\n  var person = store.push(Person, { id: 1, name: \"Tom Dale\" });\n\n  person.set('name', \"Tomasz Dale\");\n\n  person.reload().then(async(function() {\n    equal(person.get('isDirty'), true, \"the person is dirty\");\n    equal(person.get('name'), \"Tomasz Dale\", \"the local changes remain\");\n    equal(person.get('city'), \"Portland\", \"the new changes apply\");\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/unit/model/merge_test");