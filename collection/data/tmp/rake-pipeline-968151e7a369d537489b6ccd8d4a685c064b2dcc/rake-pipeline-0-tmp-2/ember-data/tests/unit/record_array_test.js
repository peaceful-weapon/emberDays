minispade.register('ember-data/~tests/unit/record_array_test', "(function() {var get = Ember.get, set = Ember.set;\nvar indexOf = Ember.EnumerableUtils.indexOf;\n\nvar Person, array;\n\nmodule(\"unit/record_array - DS.RecordArray\", {\n  setup: function() {\n    array = [{ id: '1', name: \"Scumbag Dale\" }, { id: '2', name: \"Scumbag Katz\" }, { id: '3', name: \"Scumbag Bryn\" }];\n\n    Person = DS.Model.extend({\n      name: DS.attr('string')\n    });\n  }\n});\n\ntest(\"a record array is backed by records\", function() {\n  var store = createStore();\n  store.pushMany(Person, array);\n\n  store.findByIds(Person, [1,2,3]).then(async(function(records) {\n    for (var i=0, l=get(array, 'length'); i<l; i++) {\n      deepEqual(records[i].getProperties('id', 'name'), array[i], \"a record array materializes objects on demand\");\n    }\n  }));\n});\n\ntest(\"acts as a live query\", function() {\n  var store = createStore();\n\n  var recordArray = store.all(Person);\n  store.push(Person, { id: 1, name: 'wycats' });\n  equal(get(recordArray, 'lastObject.name'), 'wycats');\n\n  store.push(Person, { id: 2, name: 'brohuda' });\n  equal(get(recordArray, 'lastObject.name'), 'brohuda');\n});\n\ntest(\"a loaded record is removed from a record array when it is deleted\", function() {\n  var Tag = DS.Model.extend({\n    people: DS.hasMany('person')\n  });\n\n  Person.reopen({\n    tag: DS.belongsTo('tag')\n  });\n\n  var env = setupStore({ tag: Tag, person: Person }),\n      store = env.store;\n\n  store.pushMany('person', array);\n  store.push('tag', { id: 1 });\n\n  var asyncRecords = Ember.RSVP.hash({\n    scumbag: store.find('person', 1),\n    tag: store.find('tag', 1)\n  });\n\n  asyncRecords.then(async(function(records) {\n    var scumbag = records.scumbag, tag = records.tag;\n\n    tag.get('people').addObject(scumbag);\n    equal(get(scumbag, 'tag'), tag, \"precond - the scumbag's tag has been set\");\n\n    var recordArray = tag.get('people');\n\n    equal(get(recordArray, 'length'), 1, \"precond - record array has one item\");\n    equal(get(recordArray.objectAt(0), 'name'), \"Scumbag Dale\", \"item at index 0 is record with id 1\");\n\n    scumbag.deleteRecord();\n\n    equal(get(recordArray, 'length'), 0, \"record is removed from the record array\");\n  }));\n});\n\n// GitHub Issue #168\ntest(\"a newly created record is removed from a record array when it is deleted\", function() {\n  var store = createStore(),\n      recordArray;\n\n  recordArray = store.all(Person);\n\n  var scumbag = store.createRecord(Person, {\n    name: \"Scumbag Dale\"\n  });\n\n  equal(get(recordArray, 'length'), 1, \"precond - record array already has the first created item\");\n\n  // guarantee coalescence\n  Ember.run(function() {\n    store.createRecord(Person, { name: 'p1'});\n    store.createRecord(Person, { name: 'p2'});\n    store.createRecord(Person, { name: 'p3'});\n  });\n\n  equal(get(recordArray, 'length'), 4, \"precond - record array has the created item\");\n  equal(get(recordArray.objectAt(0), 'name'), \"Scumbag Dale\", \"item at index 0 is record with id 1\");\n\n  scumbag.deleteRecord();\n\n  equal(get(recordArray, 'length'), 3, \"record is removed from the record array\");\n\n  recordArray.objectAt(0).set('name', 'toto');\n\n  equal(get(recordArray, 'length'), 3, \"record is still removed from the record array\");\n});\n\ntest(\"a record array returns undefined when asking for a member outside of its content Array's range\", function() {\n  var store = createStore();\n\n  store.pushMany(Person, array);\n\n  var recordArray = store.all(Person);\n\n  strictEqual(recordArray.objectAt(20), undefined, \"objects outside of the range just return undefined\");\n});\n\n// This tests for a bug in the recordCache, where the records were being cached in the incorrect order.\ntest(\"a record array should be able to be enumerated in any order\", function() {\n  var store = createStore();\n  store.pushMany(Person, array);\n\n  var recordArray = store.all(Person);\n\n  equal(get(recordArray.objectAt(2), 'id'), 3, \"should retrieve correct record at index 2\");\n  equal(get(recordArray.objectAt(1), 'id'), 2, \"should retrieve correct record at index 1\");\n  equal(get(recordArray.objectAt(0), 'id'), 1, \"should retrieve correct record at index 0\");\n});\n\nvar shouldContain = function(array, item) {\n  ok(indexOf(array, item) !== -1, \"array should contain \"+item.get('name'));\n};\n\nvar shouldNotContain = function(array, item) {\n  ok(indexOf(array, item) === -1, \"array should not contain \"+item.get('name'));\n};\n\ntest(\"an AdapterPopulatedRecordArray knows if it's loaded or not\", function() {\n  var env = setupStore({ person: Person }),\n      store = env.store;\n\n  env.adapter.findQuery = function(store, type, query, recordArray) {\n    return Ember.RSVP.resolve(array);\n  };\n\n  store.find('person', { page: 1 }).then(async(function(people) {\n    equal(get(people, 'isLoaded'), true, \"The array is now loaded\");\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/unit/record_array_test");