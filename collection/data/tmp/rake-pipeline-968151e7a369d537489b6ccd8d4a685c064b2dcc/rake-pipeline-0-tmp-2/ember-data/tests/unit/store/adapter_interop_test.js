minispade.register('ember-data/~tests/unit/store/adapter_interop_test', "(function() {var get = Ember.get, set = Ember.set;\nvar resolve = Ember.RSVP.resolve;\nvar TestAdapter, store;\n\nmodule(\"unit/store/adapter_interop - DS.Store working with a DS.Adapter\", {\n  setup: function() {\n    TestAdapter = DS.Adapter.extend();\n  },\n  teardown: function() {\n    if (store) { store.destroy(); }\n  }\n});\n\ntest(\"Adapter can be set as a factory\", function() {\n  store = createStore({adapter: TestAdapter});\n\n  ok(store.get('defaultAdapter') instanceof TestAdapter);\n});\n\ntest('Adapter can be set as a name', function() {\n  store = createStore({adapter: '_rest'});\n\n  ok(store.get('defaultAdapter') instanceof DS.RESTAdapter);\n});\n\ntest('Adapter can not be set as an instance', function() {\n  store = DS.Store.create({\n    adapter: DS.Adapter.create()\n  });\n  var assert = Ember.assert;\n  Ember.assert = function() { ok(true, \"raises an error when passing in an instance\"); };\n  store.get('defaultAdapter');\n  Ember.assert = assert;\n});\n\ntest(\"Calling Store#find invokes its adapter#find\", function() {\n  expect(4);\n\n  var adapter = TestAdapter.extend({\n    find: function(store, type, id) {\n      ok(true, \"Adapter#find was called\");\n      equal(store, currentStore, \"Adapter#find was called with the right store\");\n      equal(type,  currentType,  \"Adapter#find was called with the type passed into Store#find\");\n      equal(id,    1,            \"Adapter#find was called with the id passed into Store#find\");\n\n      return Ember.RSVP.resolve({ id: 1 });\n    }\n  });\n\n  var currentStore = createStore({ adapter: adapter });\n  var currentType = DS.Model.extend();\n\n  currentStore.find(currentType, 1);\n});\n\ntest(\"Returning a promise from `find` asynchronously loads data\", function() {\n  var adapter = TestAdapter.extend({\n    find: function(store, type, id) {\n      return resolve({ id: 1, name: \"Scumbag Dale\" });\n    }\n  });\n\n  var currentStore = createStore({ adapter: adapter });\n  var currentType = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  currentStore.find(currentType, 1).then(async(function(object) {\n    strictEqual(get(object, 'name'), \"Scumbag Dale\", \"the data was pushed\");\n  }));\n});\n\ntest(\"IDs provided as numbers are coerced to strings\", function() {\n  var adapter = TestAdapter.extend({\n    find: function(store, type, id) {\n      equal(typeof id, 'string', \"id has been normalized to a string\");\n      return resolve({ id: 1, name: \"Scumbag Sylvain\" });\n    }\n  });\n\n  var currentStore = createStore({ adapter: adapter });\n  var currentType = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  currentStore.find(currentType, 1).then(async(function(object) {\n    equal(typeof object.get('id'), 'string', \"id was coerced to a string\");\n    currentStore.push(currentType, { id: 2, name: \"Scumbag Sam Saffron\" });\n    return currentStore.find(currentType, 2);\n  })).then(async(function(object) {\n    ok(object, \"object was found\");\n    equal(typeof object.get('id'), 'string', \"id is a string despite being supplied and searched for as a number\");\n  }));\n});\n\n\nvar array = [{ id: \"1\", name: \"Scumbag Dale\" }, { id: \"2\", name: \"Scumbag Katz\" }, { id: \"3\", name: \"Scumbag Bryn\" }];\n\ntest(\"can load data for the same record if it is not dirty\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  store.push(Person, { id: 1, name: \"Tom Dale\" });\n\n  var tom = store.find(Person, 1).then(async(function(tom) {\n    equal(get(tom, 'isDirty'), false, \"precond - record is not dirty\");\n    equal(get(tom, 'name'), \"Tom Dale\", \"returns the correct name\");\n\n    store.push(Person, { id: 1, name: \"Captain Underpants\" });\n    equal(get(tom, 'name'), \"Captain Underpants\", \"updated record with new date\");\n  }));\n\n});\n\n/*\ntest(\"DS.Store loads individual records without explicit IDs with a custom primaryKey\", function() {\n  var store = DS.Store.create();\n  var Person = DS.Model.extend({ name: DS.attr('string'), primaryKey: 'key' });\n\n  store.load(Person, { key: 1, name: \"Tom Dale\" });\n\n  var tom = store.find(Person, 1);\n  equal(get(tom, 'name'), \"Tom Dale\", \"the person was successfully loaded for the given ID\");\n});\n*/\n\ntest(\"pushMany extracts ids from an Array of hashes if no ids are specified\", function() {\n  var store = createStore();\n\n  var Person = DS.Model.extend({ name: DS.attr('string') });\n\n  store.pushMany(Person, array);\n  store.find(Person, 1).then(async(function(person) {\n    equal(get(person, 'name'), \"Scumbag Dale\", \"correctly extracted id for loaded data\");\n  }));\n});\n\ntest(\"loadMany takes an optional Object and passes it on to the Adapter\", function() {\n  var passedQuery = { page: 1 };\n\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  var adapter = TestAdapter.extend({\n    findQuery: function(store, type, query) {\n      equal(type, Person, \"The type was Person\");\n      equal(query, passedQuery, \"The query was passed in\");\n      return Ember.RSVP.resolve([]);\n    }\n  });\n\n  var store = createStore({\n    adapter: adapter\n  });\n\n  store.find(Person, passedQuery);\n});\n\ntest(\"all(type) returns a record array of all records of a specific type\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  store.push(Person, { id: 1, name: \"Tom Dale\" });\n\n  var results = store.all(Person);\n  equal(get(results, 'length'), 1, \"record array should have the original object\");\n  equal(get(results.objectAt(0), 'name'), \"Tom Dale\", \"record has the correct information\");\n\n  store.push(Person, { id: 2, name: \"Yehuda Katz\" });\n  equal(get(results, 'length'), 2, \"record array should have the new object\");\n  equal(get(results.objectAt(1), 'name'), \"Yehuda Katz\", \"record has the correct information\");\n\n  strictEqual(results, store.all(Person), \"subsequent calls to all return the same recordArray)\");\n});\n\ntest(\"a new record of a particular type is created via store.createRecord(type)\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  var person = store.createRecord(Person);\n\n  equal(get(person, 'isLoaded'), true, \"A newly created record is loaded\");\n  equal(get(person, 'isNew'), true, \"A newly created record is new\");\n  equal(get(person, 'isDirty'), true, \"A newly created record is dirty\");\n\n  set(person, 'name', \"Braaahm Dale\");\n\n  equal(get(person, 'name'), \"Braaahm Dale\", \"Even if no hash is supplied, `set` still worked\");\n});\n\ntest(\"a new record with a specific id can't be created if this id is already used in the store\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  Person.reopenClass({\n    toString: function() {\n      return 'Person';\n    }\n  });\n\n  store.createRecord(Person, {id: 5});\n\n  expectAssertion(function() {\n    store.createRecord(Person, {id: 5});\n  }, /The id 5 has already been used with another record of type Person/);\n});\n\ntest(\"an initial data hash can be provided via store.createRecord(type, hash)\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  var person = store.createRecord(Person, { name: \"Brohuda Katz\" });\n\n  equal(get(person, 'isLoaded'), true, \"A newly created record is loaded\");\n  equal(get(person, 'isNew'), true, \"A newly created record is new\");\n  equal(get(person, 'isDirty'), true, \"A newly created record is dirty\");\n\n  equal(get(person, 'name'), \"Brohuda Katz\", \"The initial data hash is provided\");\n});\n\ntest(\"if an id is supplied in the initial data hash, it can be looked up using `store.find`\", function() {\n  var store = createStore();\n  var Person = DS.Model.extend({\n    name: DS.attr('string')\n  });\n\n  var person = store.createRecord(Person, { id: 1, name: \"Brohuda Katz\" });\n\n  store.find(Person, 1).then(async(function(again) {\n    strictEqual(person, again, \"the store returns the loaded object\");\n  }));\n});\n\ntest(\"records inside a collection view should have their ids updated\", function() {\n  var Person = DS.Model.extend();\n\n  var idCounter = 1;\n  var adapter = TestAdapter.extend({\n    createRecord: function(store, type, record) {\n      return Ember.RSVP.resolve({name: record.get('name'), id: idCounter++});\n    }\n  });\n\n  var store = createStore({\n    adapter: adapter\n  });\n\n  var container = Ember.CollectionView.create({\n    content: store.all(Person)\n  });\n\n  container.appendTo('#qunit-fixture');\n\n  var tom = store.createRecord(Person, {name: 'Tom Dale'});\n  var yehuda = store.createRecord(Person, {name: 'Yehuda Katz'});\n\n  Ember.RSVP.all([ tom.save(), yehuda.save() ]).then(async(function() {\n    container.content.forEach(function(person, index) {\n      equal(person.get('id'), index + 1, \"The record's id should be correct.\");\n    });\n\n    container.destroy();\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/unit/store/adapter_interop_test");