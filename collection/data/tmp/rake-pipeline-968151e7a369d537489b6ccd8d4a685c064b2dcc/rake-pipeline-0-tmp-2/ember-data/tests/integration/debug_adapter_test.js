minispade.register('ember-data/~tests/integration/debug_adapter_test', "(function() {var App, store, debugAdapter, get = Ember.get;\n\nmodule(\"DS.DebugAdapter\", {\n  setup: function() {\n    Ember.run(function() {\n      App = Ember.Application.create({\n        toString: function() { return 'App'; }\n      });\n\n      App.Store = DS.Store.extend({\n        adapter: DS.Adapter.extend()\n      });\n\n      App.Post = DS.Model.extend({\n        title: DS.attr('string')\n      });\n\n      App.advanceReadiness();\n    });\n\n    store = App.__container__.lookup('store:main');\n    debugAdapter = App.__container__.lookup('dataAdapter:main');\n\n    debugAdapter.reopen({\n      getModelTypes: function() {\n        return Ember.A([App.Post]);\n      }\n    });\n  },\n  teardown: function() {\n    App.destroy();\n  }\n});\n\ntest(\"Watching Model Types\", function() {\n  expect(5);\n\n  var added = function(types) {\n    equal(types.length, 1);\n    equal(types[0].name, 'App.Post');\n    equal(types[0].count, 0);\n    strictEqual(types[0].object, App.Post);\n  };\n\n  var updated = function(types) {\n    equal(types[0].count, 1);\n  };\n\n  debugAdapter.watchModelTypes(added, updated);\n\n  store.push('post', {id: 1, title: 'Post Title'});\n});\n\ntest(\"Watching Records\", function() {\n  var post, args, record;\n\n  Ember.run(function() {\n    store.push('post', { id: '1', title: 'Clean Post'});\n  });\n\n  var callback = function() {\n    args = arguments;\n  };\n\n  debugAdapter.watchRecords(App.Post, callback, callback, callback);\n\n  equal(get(args[0], 'length'), 1);\n  record = args[0][0];\n  deepEqual(record.columnValues, { id: '1', title: 'Clean Post'} );\n  deepEqual(record.filterValues, { isNew: false, isModified: false, isClean: true } );\n  deepEqual(record.searchKeywords, ['1', 'Clean Post'] );\n  deepEqual(record.color, 'black' );\n\n  Ember.run(function() {\n    post = store.find('post', 1);\n  });\n\n  Ember.run(function() {\n    post.set('title', 'Modified Post');\n  });\n\n  record = args[0][0];\n  deepEqual(record.columnValues, { id: '1', title: 'Modified Post'});\n  deepEqual(record.filterValues, { isNew: false, isModified: true, isClean: false });\n  deepEqual(record.searchKeywords, ['1', 'Modified Post'] );\n  deepEqual(record.color, 'blue' );\n\n  post = store.createRecord('post', { id: '2', title: 'New Post' });\n  record = args[0][0];\n  deepEqual(record.columnValues, { id: '2', title: 'New Post'});\n  deepEqual(record.filterValues, { isNew: true, isModified: false, isClean: false });\n  deepEqual(record.searchKeywords, ['2', 'New Post'] );\n  deepEqual(record.color, 'green' );\n\n  Ember.run(post, 'deleteRecord');\n\n  var index = args[0];\n  var count = args[1];\n  equal(index, 1);\n  equal(count, 1);\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/debug_adapter_test");