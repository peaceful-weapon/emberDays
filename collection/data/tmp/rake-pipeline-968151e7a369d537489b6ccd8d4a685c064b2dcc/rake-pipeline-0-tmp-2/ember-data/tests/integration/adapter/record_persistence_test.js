minispade.register('ember-data/~tests/integration/adapter/record_persistence_test', "(function() {var get = Ember.get, set = Ember.set, attr = DS.attr;\nvar Person, env, store;\n\nvar all = Ember.RSVP.all, hash = Ember.RSVP.hash, resolve = Ember.RSVP.resolve;\n\nfunction assertClean(promise) {\n  return promise.then(async(function(record) {\n    equal(record.get('isDirty'), false, \"The record is now clean\");\n    return record;\n  }));\n}\n\n\nmodule(\"integration/adapter/record_persistence - Persisting Records\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      updatedAt: attr('string'),\n      name: attr('string'),\n      firstName: attr('string'),\n      lastName: attr('string')\n    });\n    Person.toString = function() { return \"Person\"; };\n\n    env = setupStore({ person: Person });\n    store = env.store;\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\ntest(\"When a store is committed, the adapter's `commit` method should be called with records that have been changed.\", function() {\n  expect(2);\n\n  env.adapter.updateRecord = function(store, type, record) {\n    equal(type, Person, \"the type is correct\");\n    equal(record, tom, \"the record is correct\");\n\n    return Ember.RSVP.resolve();\n  };\n\n  env.store.push('person', { id: 1, name: \"Braaaahm Dale\" });\n\n  var tom;\n\n  env.store.find('person', 1).then(async(function(person) {\n    tom = person;\n    set(tom, \"name\", \"Tom Dale\");\n    tom.save();\n  }));\n});\n\ntest(\"When a store is committed, the adapter's `commit` method should be called with records that have been created.\", function() {\n  expect(2);\n\n  env.adapter.createRecord = function(store, type, record) {\n    equal(type, Person, \"the type is correct\");\n    equal(record, tom, \"the record is correct\");\n\n    return Ember.RSVP.resolve({ id: 1, name: \"Tom Dale\" });\n  };\n\n  var tom = env.store.createRecord('person', { name: \"Tom Dale\" });\n  tom.save();\n});\n\ntest(\"After a created record has been assigned an ID, finding a record by that ID returns the original record.\", function() {\n  expect(1);\n\n  env.adapter.createRecord = function(store, type, record) {\n    return Ember.RSVP.resolve({ id: 1, name: \"Tom Dale\" });\n  };\n\n  var tom = env.store.createRecord('person', { name: \"Tom Dale\" });\n  tom.save();\n\n  asyncEqual(tom, env.store.find('person', 1), \"the retrieved record is the same as the created record\");\n});\n\ntest(\"when a store is committed, the adapter's `commit` method should be called with records that have been deleted.\", function() {\n  env.adapter.deleteRecord = function(store, type, record) {\n    equal(type, Person, \"the type is correct\");\n    equal(record, tom, \"the record is correct\");\n\n    return Ember.RSVP.resolve();\n  };\n\n  var tom;\n\n  env.store.push('person', { id: 1, name: \"Tom Dale\" });\n  env.store.find('person', 1).then(async(function(person) {\n    tom = person;\n    tom.deleteRecord();\n    return tom.save();\n  })).then(async(function(tom) {\n    equal(get(tom, 'isDeleted'), true, \"record is marked as deleted\");\n  }));\n});\n\ntest(\"An adapter can notify the store that records were updated by calling `didSaveRecords`.\", function() {\n  expect(6);\n\n  var tom, yehuda;\n\n  env.adapter.updateRecord = function(store, type, record) {\n    return Ember.RSVP.resolve();\n  };\n\n  env.store.push('person', { id: 1 });\n  env.store.push('person', { id: 2 });\n\n  all([ env.store.find('person', 1), env.store.find('person', 2)  ])\n    .then(async(function(array) {\n      tom = array[0];\n      yehuda = array[1];\n\n      tom.set('name', \"Michael Phelps\");\n      yehuda.set('name', \"Usain Bolt\");\n\n      ok(tom.get('isDirty'), \"tom is dirty\");\n      ok(yehuda.get('isDirty'), \"yehuda is dirty\");\n\n      assertClean(tom.save()).then(async(function(record) {\n        equal(record, tom, \"The record is correct\");\n      }));\n\n      assertClean(yehuda.save()).then(async(function(record) {\n        equal(record, yehuda, \"The record is correct\");\n      }));\n    }));\n});\n\ntest(\"An adapter can notify the store that records were updated and provide new data by calling `didSaveRecords`.\", function() {\n  var tom, yehuda;\n\n  env.adapter.updateRecord = function(store, type, record) {\n    if (record.get('id') === \"1\") {\n      return Ember.RSVP.resolve({ id: 1, name: \"Tom Dale\", updatedAt: \"now\" });\n    } else if (record.get('id') === \"2\") {\n      return Ember.RSVP.resolve({ id: 2, name: \"Yehuda Katz\", updatedAt: \"now!\" });\n    }\n  };\n\n  env.store.push('person', { id: 1, name: \"Braaaahm Dale\" });\n  env.store.push('person', { id: 2, name: \"Gentile Katz\" });\n\n  hash({ tom: env.store.find('person', 1), yehuda: env.store.find('person', 2) }).then(async(function(people) {\n    people.tom.set('name', \"Draaaaaahm Dale\");\n    people.yehuda.set('name', \"Goy Katz\");\n\n    return hash({ tom: people.tom.save(), yehuda: people.yehuda.save() });\n  })).then(async(function(people) {\n    equal(people.tom.get('name'), \"Tom Dale\", \"name attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.tom.get('updatedAt'), \"now\", \"updatedAt attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.yehuda.get('name'), \"Yehuda Katz\", \"name attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.yehuda.get('updatedAt'), \"now!\", \"updatedAt attribute should reflect value of hash passed to didSaveRecords\");\n  }));\n});\n\ntest(\"An adapter can notify the store that a record was updated by calling `didSaveRecord`.\", function() {\n  env.adapter.updateRecord = function(store, type, record) {\n    return Ember.RSVP.resolve();\n  };\n\n  store.push('person', { id: 1 });\n  store.push('person', { id: 2 });\n\n  hash({ tom: store.find('person', 1), yehuda: store.find('person', 2) }).then(async(function(people) {\n    people.tom.set('name', \"Tom Dale\");\n    people.yehuda.set('name', \"Yehuda Katz\");\n\n    ok(people.tom.get('isDirty'), \"tom is dirty\");\n    ok(people.yehuda.get('isDirty'), \"yehuda is dirty\");\n\n    assertClean(people.tom.save());\n    assertClean(people.yehuda.save());\n  }));\n\n});\n\ntest(\"An adapter can notify the store that a record was updated and provide new data by calling `didSaveRecord`.\", function() {\n  env.adapter.updateRecord = function(store, type, record) {\n    switch (record.get('id')) {\n      case \"1\":\n        return Ember.RSVP.resolve({ id: 1, name: \"Tom Dale\", updatedAt: \"now\" });\n      case \"2\":\n        return Ember.RSVP.resolve({ id: 2, name: \"Yehuda Katz\", updatedAt: \"now!\" });\n    }\n  };\n\n  env.store.push('person', { id: 1, name: \"Braaaahm Dale\" });\n  env.store.push('person', { id: 2, name: \"Gentile Katz\" });\n\n\n  hash({ tom: store.find('person', 1), yehuda: store.find('person', 2) }).then(async(function(people) {\n    people.tom.set('name', \"Draaaaaahm Dale\");\n    people.yehuda.set('name', \"Goy Katz\");\n\n    return hash({ tom: people.tom.save(), yehuda: people.yehuda.save() });\n  })).then(async(function(people) {\n    equal(people.tom.get('name'), \"Tom Dale\", \"name attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.tom.get('updatedAt'), \"now\", \"updatedAt attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.yehuda.get('name'), \"Yehuda Katz\", \"name attribute should reflect value of hash passed to didSaveRecords\");\n    equal(people.yehuda.get('updatedAt'), \"now!\", \"updatedAt attribute should reflect value of hash passed to didSaveRecords\");\n  }));\n\n});\n\ntest(\"An adapter can notify the store that records were deleted by calling `didSaveRecords`.\", function() {\n  env.adapter.deleteRecord = function(store, type, record) {\n    return Ember.RSVP.resolve();\n  };\n\n  env.store.push('person', { id: 1, name: \"Braaaahm Dale\" });\n  env.store.push('person', { id: 2, name: \"Gentile Katz\" });\n\n  hash({ tom: store.find('person', 1), yehuda: store.find('person', 2) }).then(async(function(people) {\n    people.tom.deleteRecord();\n    people.yehuda.deleteRecord();\n\n    assertClean(people.tom.save());\n    assertClean(people.yehuda.save());\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/adapter/record_persistence_test");