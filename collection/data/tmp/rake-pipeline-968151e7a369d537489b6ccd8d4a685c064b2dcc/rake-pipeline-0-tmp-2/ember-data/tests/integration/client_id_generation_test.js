minispade.register('ember-data/~tests/integration/client_id_generation_test', "(function() {var get = Ember.get, set = Ember.set;\nvar serializer, adapter, store;\nvar Post, Comment, env;\n\nmodule(\"integration/client_id_generation - Client-side ID Generation\", {\n  setup: function() {\n    Comment = DS.Model.extend({\n      post: DS.belongsTo('post')\n    });\n\n    Post = DS.Model.extend({\n      comments: DS.hasMany('comment')\n    });\n\n    env = setupStore({\n      post: Post,\n      comment: Comment\n    });\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\ntest(\"If an adapter implements the `generateIdForRecord` method, the store should be able to assign IDs without saving to the persistence layer.\", function() {\n  expect(6);\n\n  var idCount = 1;\n\n  env.adapter.generateIdForRecord = function(passedStore, record) {\n    equal(env.store, passedStore, \"store is the first parameter\");\n\n    return \"id-\" + idCount++;\n  };\n\n  env.adapter.createRecord = function(store, type, record) {\n    if (type === Comment) {\n      equal(get(record, 'id'), 'id-1', \"Comment passed to `createRecord` has 'id-1' assigned\");\n      return Ember.RSVP.resolve();\n    } else {\n      equal(get(record, 'id'), 'id-2', \"Post passed to `createRecord` has 'id-2' assigned\");\n      return Ember.RSVP.resolve();\n    }\n  };\n\n  var comment = env.store.createRecord('comment');\n  var post = env.store.createRecord('post');\n\n  equal(get(comment, 'id'), 'id-1', \"comment is assigned id 'id-1'\");\n  equal(get(post, 'id'), 'id-2', \"post is assigned id 'id-2'\");\n\n  // Despite client-generated IDs, calling commit() on the store should still\n  // invoke the adapter's `createRecord` method.\n  comment.save();\n  post.save();\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/client_id_generation_test");