minispade.register('ember-data/~tests/integration/relationships/belongs_to_test', "(function() {var env, store, User, Message, Post, Comment;\nvar get = Ember.get, set = Ember.set;\n\nvar attr = DS.attr, hasMany = DS.hasMany, belongsTo = DS.belongsTo;\nvar resolve = Ember.RSVP.resolve, hash = Ember.RSVP.hash;\n\nfunction stringify(string) {\n  return function() { return string; };\n}\n\nmodule(\"integration/relationship/belongs_to Belongs-To Relationships\", {\n  setup: function() {\n    User = DS.Model.extend({\n      name: attr('string'),\n      messages: hasMany('message', {polymorphic: true}),\n      favouriteMessage: belongsTo('message', {polymorphic: true})\n    });\n    User.toString = stringify('User');\n\n    Message = DS.Model.extend({\n      user: belongsTo('user'),\n      created_at: attr('date')\n    });\n    Message.toString = stringify('Message');\n\n    Post = Message.extend({\n      title: attr('string'),\n      comments: hasMany('comment')\n    });\n    Post.toString = stringify('Post');\n\n    Comment = Message.extend({\n      body: DS.attr('string'),\n      message: DS.belongsTo('message', { polymorphic: true })\n    });\n    Comment.toString = stringify('Comment');\n\n    env = setupStore({\n      user: User,\n      post: Post,\n      comment: Comment,\n      message: Message\n    });\n\n    env.container.register('serializer:user', DS.JSONSerializer.extend({\n      attrs: {\n        favouriteMessage: { embedded: 'always' }\n      }\n    }));\n\n    store = env.store;\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\ntest(\"The store can materialize a non loaded monomorphic belongsTo association\", function() {\n  expect(1);\n\n  env.store.modelFor('post').reopen({\n    user: DS.belongsTo('user', { async: true })\n  });\n\n  env.adapter.find = function(store, type, id) {\n    ok(true, \"The adapter's find method should be called\");\n    return Ember.RSVP.resolve({ id: 1 });\n  };\n\n  env.store.push('post', { id: 1, user: 2});\n\n  env.store.find('post', 1).then(async(function(post) {\n    post.get('user');\n  }));\n});\n\ntest(\"Only a record of the same type can be used with a monomorphic belongsTo relationship\", function() {\n  expect(1);\n\n  store.push('post', { id: 1 });\n  store.push('comment', { id: 2 });\n\n  hash({ post: store.find('post', 1), comment: store.find('comment', 2) }).then(async(function(records) {\n    expectAssertion(function() {\n      records.post.set('user', records.comment);\n    }, /You can only add a 'user' record to this relationship/);\n  }));\n});\n\ntest(\"Only a record of the same base type can be used with a polymorphic belongsTo relationship\", function() {\n  expect(1);\n  store.push('comment', { id: 1 });\n  store.push('comment', { id: 2 });\n  store.push('post', { id: 1 });\n  store.push('user', { id: 3 });\n\n  var asyncRecords = hash({\n    user: store.find('user', 3),\n    post: store.find('post', 1),\n    comment: store.find('comment', 1),\n    anotherComment: store.find('comment', 2)\n  });\n\n  asyncRecords.then(async(function(records) {\n    var comment = records.comment;\n\n    comment.set('message', records.anotherComment);\n    comment.set('message', records.post);\n    comment.set('message', null);\n\n    expectAssertion(function() {\n      comment.set('message', records.user);\n    }, /You can only add a 'message' record to this relationship/);\n  }));\n});\n\ntest(\"The store can load a polymorphic belongsTo association\", function() {\n  env.store.push('post', { id: 1 });\n  env.store.push('comment', { id: 2, message: 1, messageType: 'post' });\n\n  hash({ message: store.find('post', 1), comment: store.find('comment', 2) }).then(async(function(records) {\n    equal(records.comment.get('message'), records.message);\n  }));\n});\n\ntest(\"The store can serialize a polymorphic belongsTo association\", function() {\n  env.serializer.serializePolymorphicType = function(record, json, relationship) {\n    ok(true, \"The serializer's serializePolymorphicType method should be called\");\n    json[\"message_type\"] = \"post\";\n  };\n  env.store.push('post', { id: 1 });\n  env.store.push('comment', { id: 2, message: 1, messageType: 'post' });\n\n  store.find('comment', 2).then(async(function(comment) {\n    var serialized = store.serialize(comment, { includeId: true });\n    equal(serialized['message'], 1);\n    equal(serialized['message_type'], 'post');\n  }));\n});\n\ntest(\"A serializer can materialize a belongsTo as a link that gets sent back to findBelongsTo\", function() {\n  var Group = DS.Model.extend({\n    people: DS.hasMany()\n  });\n\n  var Person = DS.Model.extend({\n    group: DS.belongsTo({ async: true })\n  });\n\n  env.container.register('model:group', Group);\n  env.container.register('model:person', Person);\n\n  store.push('person', { id: 1, links: { group: '/people/1/group' } });\n\n  env.adapter.find = function() {\n    throw new Error(\"Adapter's find method should not be called\");\n  };\n\n  env.adapter.findBelongsTo = async(function(store, record, link, relationship) {\n    equal(relationship.type, Group);\n    equal(relationship.key, 'group');\n    equal(link, \"/people/1/group\");\n\n    return Ember.RSVP.resolve({ id: 1, people: [1] });\n  });\n\n  env.store.find('person', 1).then(async(function(person) {\n    return person.get('group');\n  })).then(async(function(group) {\n    ok(group instanceof Group, \"A group object is loaded\");\n    ok(group.get('id') === '1', 'It is the group we are expecting');\n  }));\n});\n\ntest('A record with an async belongsTo relationship always returns a promise for that relationship', function () {\n  var Seat = DS.Model.extend({\n    person: DS.belongsTo('person')\n  });\n\n  var Person = DS.Model.extend({\n    seat: DS.belongsTo('seat', { async: true })\n  });\n\n  env.container.register('model:seat', Seat);\n  env.container.register('model:person', Person);\n\n  store.push('person', { id: 1, links: { seat: '/people/1/seat' } });\n\n  env.adapter.find = function() {\n    throw new Error(\"Adapter's find method should not be called\");\n  };\n\n  env.adapter.findBelongsTo = async(function(store, record, link, relationship) {\n    return Ember.RSVP.resolve({ id: 1});\n  });\n\n  env.store.find('person', 1).then(async(function(person) {\n    person.get('seat').then(async(function(seat) {\n        // this assertion fails too\n        // ok(seat.get('person') === person, 'parent relationship should be populated');\n        seat.set('person', person);\n        ok(person.get('seat').then, 'seat should be a PromiseObject');\n    }));\n  }));\n});\n\ntest(\"TODO (embedded): The store can load an embedded polymorphic belongsTo association\", function() {\n  expect(0);\n  //serializer.keyForEmbeddedType = function() {\n    //return 'embeddedType';\n  //};\n\n  //adapter.load(store, App.User, { id: 2, favourite_message: { id: 1, embeddedType: 'comment'}});\n\n  //var user = store.find(App.User, 2),\n      //message = store.find(App.Comment, 1);\n\n  //equal(user.get('favouriteMessage'), message);\n});\n\ntest(\"TODO (embedded): The store can serialize an embedded polymorphic belongsTo association\", function() {\n  expect(0);\n  //serializer.keyForEmbeddedType = function() {\n    //return 'embeddedType';\n  //};\n  //adapter.load(store, App.User, { id: 2, favourite_message: { id: 1, embeddedType: 'comment'}});\n\n  //var user = store.find(App.User, 2),\n      //serialized = store.serialize(user, {includeId: true});\n\n  //ok(serialized.hasOwnProperty('favourite_message'));\n  //equal(serialized.favourite_message.id, 1);\n  //equal(serialized.favourite_message.embeddedType, 'comment');\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/relationships/belongs_to_test");