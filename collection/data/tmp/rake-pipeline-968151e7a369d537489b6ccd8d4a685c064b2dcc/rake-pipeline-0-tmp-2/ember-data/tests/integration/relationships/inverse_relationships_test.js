minispade.register('ember-data/~tests/integration/relationships/inverse_relationships_test', "(function() {var Post, Comment, Message, User, store, env;\n\nmodule('integration/relationships/inverse_relationships - Inverse Relationships');\n\ntest(\"When a record is added to a has-many relationship, the inverse belongsTo is determined automatically\", function() {\n  Post = DS.Model.extend({\n    comments: DS.hasMany('comment')\n  });\n\n  Comment = DS.Model.extend({\n    post: DS.belongsTo('post')\n  });\n\n  var env = setupStore({ post: Post, comment: Comment }),\n      store = env.store;\n\n  var comment = store.createRecord('comment');\n  var post = store.createRecord('post');\n\n  equal(comment.get('post'), null, \"no post has been set on the comment\");\n\n  post.get('comments').pushObject(comment);\n  equal(comment.get('post'), post, \"post was set on the comment\");\n});\n\ntest(\"Inverse relationships can be explicitly nullable\", function () {\n  User = DS.Model.extend();\n\n  Post = DS.Model.extend({\n    lastParticipant: DS.belongsTo(User, { inverse: null }),\n    participants: DS.hasMany(User, { inverse: 'posts' })\n  });\n\n  User.reopen({\n    posts: DS.hasMany(Post, { inverse: 'participants' })\n  });\n\n  equal(User.inverseFor('posts').name, 'participants', 'User.posts inverse is Post.participants');\n  equal(Post.inverseFor('lastParticipant'), null, 'Post.lastParticipant has no inverse');\n  equal(Post.inverseFor('participants').name, 'posts', 'Post.participants inverse is User.posts');\n});\n\ntest(\"When a record is added to a has-many relationship, the inverse belongsTo can be set explicitly\", function() {\n  Post = DS.Model.extend({\n    comments: DS.hasMany('comment', { inverse: 'redPost' })\n  });\n\n  Comment = DS.Model.extend({\n    onePost: DS.belongsTo('post'),\n    twoPost: DS.belongsTo('post'),\n    redPost: DS.belongsTo('post'),\n    bluePost: DS.belongsTo('post')\n  });\n\n  var env = setupStore({ post: Post, comment: Comment }),\n      store = env.store;\n\n  var comment = store.createRecord('comment');\n  var post = store.createRecord('post');\n\n  equal(comment.get('onePost'), null, \"onePost has not been set on the comment\");\n  equal(comment.get('twoPost'), null, \"twoPost has not been set on the comment\");\n  equal(comment.get('redPost'), null, \"redPost has not been set on the comment\");\n  equal(comment.get('bluePost'), null, \"bluePost has not been set on the comment\");\n\n  post.get('comments').pushObject(comment);\n\n  equal(comment.get('onePost'), null, \"onePost has not been set on the comment\");\n  equal(comment.get('twoPost'), null, \"twoPost has not been set on the comment\");\n  equal(comment.get('redPost'), post, \"redPost has been set on the comment\");\n  equal(comment.get('bluePost'), null, \"bluePost has not been set on the comment\");\n});\n\ntest(\"When a record's belongsTo relationship is set, it can specify the inverse hasMany to which the new child should be added\", function() {\n  Post = DS.Model.extend({\n    meComments: DS.hasMany('comment'),\n    youComments: DS.hasMany('comment'),\n    everyoneWeKnowComments: DS.hasMany('comment')\n  });\n\n  Comment = DS.Model.extend({\n    post: DS.belongsTo('post', { inverse: 'youComments' })\n  });\n\n  var env = setupStore({ post: Post, comment: Comment }),\n      store = env.store;\n\n  var comment = store.createRecord('comment');\n  var post = store.createRecord('post');\n\n  equal(post.get('meComments.length'), 0, \"meComments has no posts\");\n  equal(post.get('youComments.length'), 0, \"youComments has no posts\");\n  equal(post.get('everyoneWeKnowComments.length'), 0, \"everyoneWeKnowComments has no posts\");\n\n  comment.set('post', post);\n\n  equal(post.get('meComments.length'), 0, \"meComments has no posts\");\n  equal(post.get('youComments.length'), 1, \"youComments had the post added\");\n  equal(post.get('everyoneWeKnowComments.length'), 0, \"everyoneWeKnowComments has no posts\");\n});\n\ntest(\"When a record is added to or removed from a polymorphic has-many relationship, the inverse belongsTo can be set explicitly\", function() {\n  User = DS.Model.extend({\n    messages: DS.hasMany('message', {\n      inverse: 'redUser',\n      polymorphic: true\n    })\n  });\n\n  Message = DS.Model.extend({\n    oneUser: DS.belongsTo('user'),\n    twoUser: DS.belongsTo('user'),\n    redUser: DS.belongsTo('user'),\n    blueUser: DS.belongsTo('user')\n  });\n\n  Post = Message.extend();\n\n  var env = setupStore({ user: User, message: Message, post: Post }),\n      store = env.store;\n\n  var post = store.createRecord('post');\n  var user = store.createRecord('user');\n\n  equal(post.get('oneUser'), null, \"oneUser has not been set on the user\");\n  equal(post.get('twoUser'), null, \"twoUser has not been set on the user\");\n  equal(post.get('redUser'), null, \"redUser has not been set on the user\");\n  equal(post.get('blueUser'), null, \"blueUser has not been set on the user\");\n\n  user.get('messages').pushObject(post);\n\n  equal(post.get('oneUser'), null, \"oneUser has not been set on the user\");\n  equal(post.get('twoUser'), null, \"twoUser has not been set on the user\");\n  equal(post.get('redUser'), user, \"redUser has been set on the user\");\n  equal(post.get('blueUser'), null, \"blueUser has not been set on the user\");\n\n  user.get('messages').popObject();\n\n  equal(post.get('oneUser'), null, \"oneUser has not been set on the user\");\n  equal(post.get('twoUser'), null, \"twoUser has not been set on the user\");\n  equal(post.get('redUser'), null, \"redUser has bot been set on the user\");\n  equal(post.get('blueUser'), null, \"blueUser has not been set on the user\");\n});\n\ntest(\"When a record's belongsTo relationship is set, it can specify the inverse polymorphic hasMany to which the new child should be added or removed\", function() {\n  User = DS.Model.extend({\n    meMessages: DS.hasMany('message', { polymorphic: true }),\n    youMessages: DS.hasMany('message', { polymorphic: true }),\n    everyoneWeKnowMessages: DS.hasMany('message', { polymorphic: true })\n  });\n\n  Message = DS.Model.extend({\n    user: DS.belongsTo('user', { inverse: 'youMessages' })\n  });\n\n  Post = Message.extend();\n\n  var env = setupStore({ user: User, message: Message, post: Post }),\n      store = env.store;\n\n  var user = store.createRecord('user');\n  var post = store.createRecord('post');\n\n  equal(user.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(user.get('youMessages.length'), 0, \"youMessages has no posts\");\n  equal(user.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n\n  post.set('user', user);\n\n  equal(user.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(user.get('youMessages.length'), 1, \"youMessages had the post added\");\n  equal(user.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n\n  post.set('user', null);\n\n  equal(user.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(user.get('youMessages.length'), 0, \"youMessages has no posts\");\n  equal(user.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n});\n\ntest(\"When a record's polymorphic belongsTo relationship is set, it can specify the inverse hasMany to which the new child should be added\", function() {\n  Message = DS.Model.extend({\n    meMessages: DS.hasMany('comment'),\n    youMessages: DS.hasMany('comment'),\n    everyoneWeKnowMessages: DS.hasMany('comment')\n  });\n\n  Post = Message.extend();\n\n  Comment = Message.extend({\n    message: DS.belongsTo('message', {\n      polymorphic: true,\n      inverse: 'youMessages'\n    })\n  });\n\n  var env = setupStore({ comment: Comment, message: Message, post: Post }),\n      store = env.store;\n\n  var comment = store.createRecord('comment');\n  var post = store.createRecord('post');\n\n  equal(post.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(post.get('youMessages.length'), 0, \"youMessages has no posts\");\n  equal(post.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n\n  comment.set('message', post);\n\n  equal(post.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(post.get('youMessages.length'), 1, \"youMessages had the post added\");\n  equal(post.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n\n  comment.set('message', null);\n\n  equal(post.get('meMessages.length'), 0, \"meMessages has no posts\");\n  equal(post.get('youMessages.length'), 0, \"youMessages has no posts\");\n  equal(post.get('everyoneWeKnowMessages.length'), 0, \"everyoneWeKnowMessages has no posts\");\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/relationships/inverse_relationships_test");