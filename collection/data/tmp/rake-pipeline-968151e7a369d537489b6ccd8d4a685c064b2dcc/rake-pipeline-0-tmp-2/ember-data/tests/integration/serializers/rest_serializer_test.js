minispade.register('ember-data/~tests/integration/serializers/rest_serializer_test', "(function() {var get = Ember.get, set = Ember.set;\nvar HomePlanet, league, SuperVillain, superVillain, EvilMinion, YellowMinion, DoomsdayDevice, Comment, env;\n\nmodule(\"integration/serializer/rest - RESTSerializer\", {\n  setup: function() {\n    HomePlanet = DS.Model.extend({\n      name:          DS.attr('string'),\n      superVillains: DS.hasMany('superVillain')\n    });\n    SuperVillain = DS.Model.extend({\n      firstName:     DS.attr('string'),\n      lastName:      DS.attr('string'),\n      homePlanet:    DS.belongsTo(\"homePlanet\"),\n      evilMinions:   DS.hasMany(\"evilMinion\")\n    });\n    EvilMinion = DS.Model.extend({\n      superVillain: DS.belongsTo('superVillain'),\n      name:         DS.attr('string')\n    });\n    YellowMinion = EvilMinion.extend();\n    DoomsdayDevice = DS.Model.extend({\n      name:         DS.attr('string'),\n      evilMinion:   DS.belongsTo('evilMinion', {polymorphic: true})\n    });\n    Comment = DS.Model.extend({\n      body: DS.attr('string'),\n      root: DS.attr('boolean'),\n      children: DS.hasMany('comment')\n    });\n    env = setupStore({\n      superVillain:   SuperVillain,\n      homePlanet:     HomePlanet,\n      evilMinion:     EvilMinion,\n      yellowMinion:   YellowMinion,\n      doomsdayDevice: DoomsdayDevice,\n      comment:        Comment\n    });\n    env.store.modelFor('superVillain');\n    env.store.modelFor('homePlanet');\n    env.store.modelFor('evilMinion');\n    env.store.modelFor('yellowMinion');\n    env.store.modelFor('doomsdayDevice');\n    env.store.modelFor('comment');\n  },\n\n  teardown: function() {\n    env.store.destroy();\n  }\n});\n\ntest(\"extractArray with custom typeForRoot\", function() {\n  env.restSerializer.typeForRoot = function(root) {\n    var camelized = Ember.String.camelize(root);\n    return Ember.String.singularize(camelized);\n  };\n\n  var json_hash = {\n    home_planets: [{id: \"1\", name: \"Umber\", superVillains: [1]}],\n    super_villains: [{id: \"1\", firstName: \"Tom\", lastName: \"Dale\", homePlanet: \"1\"}]\n  };\n\n  var array = env.restSerializer.extractArray(env.store, HomePlanet, json_hash);\n\n  deepEqual(array, [{\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    \"superVillains\": [1]\n  }]);\n\n  env.store.find(\"superVillain\", 1).then(async(function(minion){\n    equal(minion.get('firstName'), \"Tom\");\n  }));\n});\n\ntest(\"serialize polymorphicType\", function() {\n  var tom = env.store.createRecord(YellowMinion,   {name: \"Alex\", id: \"124\"});\n  var ray = env.store.createRecord(DoomsdayDevice, {evilMinion: tom, name: \"DeathRay\"});\n\n  var json = env.restSerializer.serialize(ray);\n\n  deepEqual(json, {\n    name:  \"DeathRay\",\n    evilMinionType: \"yellowMinion\",\n    evilMinion: \"124\"\n  });\n});\n\ntest(\"extractArray can load secondary records of the same type without affecting the query count\", function() {\n  var json_hash = {\n    comments: [{id: \"1\", body: \"Parent Comment\", root: true, children: [2, 3]}],\n    _comments: [\n      { id: \"2\", body: \"Child Comment 1\", root: false },\n      { id: \"3\", body: \"Child Comment 2\", root: false }\n    ]\n  };\n\n  var array = env.restSerializer.extractArray(env.store, Comment, json_hash);\n\n  deepEqual(array, [{\n    \"id\": \"1\",\n    \"body\": \"Parent Comment\",\n    \"root\": true,\n    \"children\": [2, 3]\n  }]);\n\n  equal(array.length, 1, \"The query count is unaffected\");\n\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"body\"), \"Child Comment 1\", \"Secondary records are in the store\");\n  equal(env.store.recordForId(\"comment\", \"3\").get(\"body\"), \"Child Comment 2\", \"Secondary records are in the store\");\n});\n\ntest(\"extractSingle loads secondary records with correct serializer\", function() {\n  var superVillainNormalizeCount = 0;\n\n  env.container.register('serializer:superVillain', DS.RESTSerializer.extend({\n    normalize: function() {\n      superVillainNormalizeCount++;\n      return this._super.apply(this, arguments);\n    }\n  }));\n\n  var json_hash = {\n    evilMinion: {id: \"1\", name: \"Tom Dale\", superVillain: 1},\n    superVillains: [{id: \"1\", firstName: \"Yehuda\", lastName: \"Katz\", homePlanet: \"1\"}]\n  };\n\n  var array = env.restSerializer.extractSingle(env.store, EvilMinion, json_hash);\n\n  equal(superVillainNormalizeCount, 1, \"superVillain is normalized once\");\n});\n\ntest(\"extractArray loads secondary records with correct serializer\", function() {\n  var superVillainNormalizeCount = 0;\n\n  env.container.register('serializer:superVillain', DS.RESTSerializer.extend({\n    normalize: function() {\n      superVillainNormalizeCount++;\n      return this._super.apply(this, arguments);\n    }\n  }));\n\n  var json_hash = {\n    evilMinions: [{id: \"1\", name: \"Tom Dale\", superVillain: 1}],\n    superVillains: [{id: \"1\", firstName: \"Yehuda\", lastName: \"Katz\", homePlanet: \"1\"}]\n  };\n\n  var array = env.restSerializer.extractArray(env.store, EvilMinion, json_hash);\n\n  equal(superVillainNormalizeCount, 1, \"superVillain is normalized once\");\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/serializers/rest_serializer_test");