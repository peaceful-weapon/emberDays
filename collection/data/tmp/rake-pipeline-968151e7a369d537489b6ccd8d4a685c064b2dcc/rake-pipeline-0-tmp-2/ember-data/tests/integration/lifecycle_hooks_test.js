minispade.register('ember-data/~tests/integration/lifecycle_hooks_test', "(function() {var Person, env;\nvar attr = DS.attr;\nvar resolve = Ember.RSVP.resolve;\n\nmodule(\"integration/lifecycle_hooks - Lifecycle Hooks\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      name: attr('string')\n    });\n\n    env = setupStore({\n      person: Person\n    });\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\nasyncTest(\"When the adapter acknowledges that a record has been created, a `didCreate` event is triggered.\", function() {\n  expect(3);\n\n  env.adapter.createRecord = function(store, type, record) {\n    return resolve({ id: 99, name: \"Yehuda Katz\" });\n  };\n\n  var person = env.store.createRecord(Person, { name: \"Yehuda Katz\" });\n\n  person.on('didCreate', function() {\n    equal(this, person, \"this is bound to the record\");\n    equal(this.get('id'), \"99\", \"the ID has been assigned\");\n    equal(this.get('name'), \"Yehuda Katz\", \"the attribute has been assigned\");\n    start();\n  });\n\n  person.save();\n});\n\ntest(\"When the adapter acknowledges that a record has been created without a new data payload, a `didCreate` event is triggered.\", function() {\n  expect(3);\n\n  env.adapter.createRecord = function(store, type, record) {\n    return Ember.RSVP.resolve();\n  };\n\n  var person = env.store.createRecord(Person, { id: 99, name: \"Yehuda Katz\" });\n\n  person.on('didCreate', function() {\n    equal(this, person, \"this is bound to the record\");\n    equal(this.get('id'), \"99\", \"the ID has been assigned\");\n    equal(this.get('name'), \"Yehuda Katz\", \"the attribute has been assigned\");\n  });\n\n  person.save();\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/lifecycle_hooks_test");