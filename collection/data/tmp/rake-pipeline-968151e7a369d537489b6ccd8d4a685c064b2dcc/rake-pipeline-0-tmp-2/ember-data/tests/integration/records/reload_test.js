minispade.register('ember-data/~tests/integration/records/reload_test', "(function() {var get = Ember.get, set = Ember.set;\nvar attr = DS.attr;\nvar Person, env;\n\nmodule(\"integration/reload - Reloading Records\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      updatedAt: attr('string'),\n      name: attr('string'),\n      firstName: attr('string'),\n      lastName: attr('string')\n    });\n\n    Person.toString = function() { return \"Person\"; };\n\n    env = setupStore({ person: Person });\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\ntest(\"When a single record is requested, the adapter's find method should be called unless it's loaded.\", function() {\n  var count = 0;\n\n  env.adapter.find = function(store, type, id) {\n    if (count === 0) {\n      count++;\n      return Ember.RSVP.resolve({ id: id, name: \"Tom Dale\" });\n    } else if (count === 1) {\n      count++;\n      return Ember.RSVP.resolve({ id: id, name: \"Braaaahm Dale\" });\n    } else {\n      ok(false, \"Should not get here\");\n    }\n  };\n\n  env.store.find('person', 1).then(async(function(person) {\n    equal(get(person, 'name'), \"Tom Dale\", \"The person is loaded with the right name\");\n    equal(get(person, 'isLoaded'), true, \"The person is now loaded\");\n    var promise = person.reload();\n    equal(get(person, 'isReloading'), true, \"The person is now reloading\");\n    return promise;\n  })).then(async(function(person) {\n    equal(get(person, 'isReloading'), false, \"The person is no longer reloading\");\n    equal(get(person, 'name'), \"Braaaahm Dale\", \"The person is now updated with the right name\");\n  }));\n});\n\ntest(\"When a record is reloaded and fails, it can try again\", function() {\n  var tom = env.store.push('person', { id: 1, name: \"Tom Dale\" });\n\n  var count = 0;\n  env.adapter.find = function(store, type, id) {\n    if (count++ === 0) {\n      return Ember.RSVP.reject();\n    } else {\n      return Ember.RSVP.resolve({ id: 1, name: \"Thomas Dale\" });\n    }\n  };\n\n  tom.reload().then(null, async(function() {\n    equal(tom.get('isError'), true, \"Tom is now errored\");\n    return tom.reload();\n  })).then(async(function(person) {\n    equal(person, tom, \"The resolved value is the record\");\n    equal(tom.get('isError'), false, \"Tom is no longer errored\");\n    equal(tom.get('name'), \"Thomas Dale\", \"the updates apply\");\n  }));\n});\n\ntest(\"When a record is loaded a second time, isLoaded stays true\", function() {\n  env.store.push('person', { id: 1, name: \"Tom Dale\" });\n\n  env.store.find('person', 1).then(async(function(person) {\n    equal(get(person, 'isLoaded'), true, \"The person is loaded\");\n    person.addObserver('isLoaded', isLoadedDidChange);\n\n    // Reload the record\n    env.store.push('person', { id: 1, name: \"Tom Dale\" });\n    equal(get(person, 'isLoaded'), true, \"The person is still loaded after load\");\n\n    person.removeObserver('isLoaded', isLoadedDidChange);\n  }));\n\n  function isLoadedDidChange() {\n    // This shouldn't be hit\n    equal(get(this, 'isLoaded'), true, \"The person is still loaded after change\");\n  }\n});\n\ntest(\"When a record is reloaded, its async hasMany relationships still work\", function() {\n  env.container.register('model:person', DS.Model.extend({\n    name: DS.attr(),\n    tags: DS.hasMany('tag', { async: true })\n  }));\n\n  env.container.register('model:tag', DS.Model.extend({\n    name: DS.attr()\n  }));\n\n  var tags = { 1: \"hipster\", 2: \"hair\" };\n\n  env.adapter.find = function(store, type, id) {\n    switch (type.typeKey) {\n      case 'person':\n        return Ember.RSVP.resolve({ id: 1, name: \"Tom\", tags: [1, 2] });\n      case 'tag':\n        return Ember.RSVP.resolve({ id: id, name: tags[id] });\n    }\n  };\n\n  var tom;\n\n  env.store.find('person', 1).then(async(function(person) {\n    tom = person;\n    equal(person.get('name'), \"Tom\", \"precond\");\n\n    return person.get('tags');\n  })).then(async(function(tags) {\n    deepEqual(tags.mapBy('name'), [ 'hipster', 'hair' ]);\n\n    return tom.reload();\n  })).then(async(function(person) {\n    equal(person.get('name'), \"Tom\", \"precond\");\n\n    return person.get('tags');\n  })).then(async(function(tags) {\n    deepEqual(tags.mapBy('name'), [ 'hipster', 'hair' ], \"The tags are still there\");\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/records/reload_test");