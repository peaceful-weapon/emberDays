minispade.register('ember-data/~tests/integration/adapter/queries_test', "(function() {var get = Ember.get, set = Ember.set;\nvar Person, env, store, adapter;\n\nmodule(\"integration/adapter/queries - Queries\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      updatedAt: DS.attr('string'),\n      name: DS.attr('string'),\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string')\n    });\n\n    env = setupStore({ person: Person });\n    store = env.store;\n    adapter = env.adapter;\n  },\n\n  teardown: function() {\n    env.container.destroy();\n  }\n});\n\ntest(\"When a query is made, the adapter should receive a record array it can populate with the results of the query.\", function() {\n  adapter.findQuery = function(store, type, query, recordArray) {\n    equal(type, Person, \"the find method is called with the correct type\");\n\n    return Ember.RSVP.resolve([{ id: 1, name: \"Peter Wagenet\" }, { id: 2, name: \"Brohuda Katz\" }]);\n  };\n\n  store.find('person', { page: 1 }).then(async(function(queryResults) {\n    equal(get(queryResults, 'length'), 2, \"the record array has a length of 2 after the results are loaded\");\n    equal(get(queryResults, 'isLoaded'), true, \"the record array's `isLoaded` property should be true\");\n\n    equal(queryResults.objectAt(0).get('name'), \"Peter Wagenet\", \"the first record is 'Peter Wagenet'\");\n    equal(queryResults.objectAt(1).get('name'), \"Brohuda Katz\", \"the second record is 'Brohuda Katz'\");\n  }));\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/adapter/queries_test");