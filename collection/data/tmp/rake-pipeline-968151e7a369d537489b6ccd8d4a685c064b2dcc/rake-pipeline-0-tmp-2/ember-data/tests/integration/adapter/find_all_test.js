minispade.register('ember-data/~tests/integration/adapter/find_all_test', "(function() {var get = Ember.get, set = Ember.set;\n\nvar Person, adapter, store, allRecords;\n\nmodule(\"integration/adapter/find_all - Finding All Records of a Type\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      updatedAt: DS.attr('string'),\n      name: DS.attr('string'),\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string')\n    });\n\n    allRecords = null;\n  },\n\n  teardown: function() {\n    if (allRecords) { allRecords.destroy(); }\n    store.destroy();\n  }\n});\n\ntest(\"When all records for a type are requested, the store should call the adapter's `findAll` method.\", function() {\n  expect(5);\n\n  store = createStore({ adapter: DS.Adapter.extend({\n      findAll: function(store, type, since) {\n        // this will get called twice\n        ok(true, \"the adapter's findAll method should be invoked\");\n\n        return Ember.RSVP.resolve([{ id: 1, name: \"Braaaahm Dale\" }]);\n      }\n    })\n  });\n\n  var allRecords;\n\n  store.find(Person).then(async(function(all) {\n    allRecords = all;\n    equal(get(all, 'length'), 1, \"the record array's length is 1 after a record is loaded into it\");\n    equal(all.objectAt(0).get('name'), \"Braaaahm Dale\", \"the first item in the record array is Braaaahm Dale\");\n  }));\n\n  store.find(Person).then(async(function(all) {\n    // Only one record array per type should ever be created (identity map)\n    strictEqual(allRecords, all, \"the same record array is returned every time all records of a type are requested\");\n  }));\n});\n\ntest(\"When all records for a type are requested, a rejection should reject the promise\", function() {\n  expect(5);\n\n  var count = 0;\n  store = createStore({ adapter: DS.Adapter.extend({\n    findAll: function(store, type, since) {\n        // this will get called twice\n        ok(true, \"the adapter's findAll method should be invoked\");\n\n        if (count++ === 0) {\n          return Ember.RSVP.reject();\n        } else {\n          return Ember.RSVP.resolve([{ id: 1, name: \"Braaaahm Dale\" }]);\n        }\n      }\n    })\n  });\n\n  var allRecords;\n\n  store.find(Person).then(null, async(function() {\n    ok(true, \"The rejection should get here\");\n    return store.find(Person);\n  })).then(async(function(all) {\n    allRecords = all;\n    equal(get(all, 'length'), 1, \"the record array's length is 1 after a record is loaded into it\");\n    equal(all.objectAt(0).get('name'), \"Braaaahm Dale\", \"the first item in the record array is Braaaahm Dale\");\n  }));\n});\n\ntest(\"When all records for a type are requested, records that are already loaded should be returned immediately.\", function() {\n  expect(3);\n\n  // Load a record from the server\n  store.push(Person, { id: 1, name: \"Jeremy Ashkenas\" });\n\n  // Create a new, unsaved record in the store\n  store.createRecord(Person, { name: \"Alex MacCaw\" });\n\n  allRecords = store.all(Person);\n\n  equal(get(allRecords, 'length'), 2, \"the record array's length is 2\");\n  equal(allRecords.objectAt(0).get('name'), \"Jeremy Ashkenas\", \"the first item in the record array is Jeremy Ashkenas\");\n  equal(allRecords.objectAt(1).get('name'), \"Alex MacCaw\", \"the second item in the record array is Alex MacCaw\");\n});\n\ntest(\"When all records for a type are requested, records that are created on the client should be added to the record array.\", function() {\n  expect(3);\n\n  allRecords = store.all(Person);\n\n  equal(get(allRecords, 'length'), 0, \"precond - the record array's length is zero before any records are loaded\");\n\n  store.createRecord(Person, { name: \"Carsten Nielsen\" });\n\n  equal(get(allRecords, 'length'), 1, \"the record array's length is 1\");\n  equal(allRecords.objectAt(0).get('name'), \"Carsten Nielsen\", \"the first item in the record array is Carsten Nielsen\");\n});\n\n})();\n//@ sourceURL=ember-data/~tests/integration/adapter/find_all_test");