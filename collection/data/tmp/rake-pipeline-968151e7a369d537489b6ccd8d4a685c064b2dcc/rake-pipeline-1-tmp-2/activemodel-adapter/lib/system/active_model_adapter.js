minispade.register('activemodel-adapter/system/active_model_adapter', "(function() {minispade.require('ember-data/adapters/rest_adapter');\nminispade.require('activemodel-adapter/system/active_model_serializer');\n\n/**\n  @module ember-data\n*/\n\nvar forEach = Ember.EnumerableUtils.forEach;\n\n/**\n  The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate\n  with a JSON API that uses an underscored naming convention instead of camelcasing.\n  It has been designed to work out of the box with the\n  [active_model_serializers](http://github.com/rails-api/active_model_serializers)\n  Ruby gem.\n\n  This adapter extends the DS.RESTAdapter by making consistent use of the camelization, \n  decamelization and pluralization methods to normalize the serialized JSON into a \n  format that is compatible with a conventional Rails backend and Ember Data. \n\n  ## JSON Structure\n\n  The ActiveModelAdapter expects the JSON returned from your server to follow\n  the REST adapter conventions substituting underscored keys for camelcased ones.\n\n  ### Conventional Names\n\n  Attribute names in your JSON payload should be the underscored versions of\n  the attributes in your Ember.js models.\n\n  For example, if you have a `Person` model:\n\n  ```js\n  App.FamousPerson = DS.Model.extend({\n    firstName: DS.attr('string'),\n    lastName: DS.attr('string'),\n    occupation: DS.attr('string')\n  });\n  ```\n\n  The JSON returned should look like this:\n\n  ```js\n  {\n    \"famous_person\": {\n      \"first_name\": \"Barack\",\n      \"last_name\": \"Obama\",\n      \"occupation\": \"President\"\n    }\n  }\n  ```\n\n  @class ActiveModelAdapter\n  @constructor\n  @namespace DS\n  @extends DS.Adapter\n**/\n\nDS.ActiveModelAdapter = DS.RESTAdapter.extend({\n  defaultSerializer: '_ams',\n  /**\n    The ActiveModelAdapter overrides the `pathForType` method to build \n    underscored URLs by decamelizing and pluralizing the object type name.\n\n    ```js\n      this.pathForType(\"famousPerson\");\n      //=> \"famous_people\"\n    ```\n\n    @method pathForType\n    @param {String} type\n    @returns String\n  */\n  pathForType: function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  },\n\n  /**\n    The ActiveModelAdapter overrides the `ajaxError` method\n    to return a DS.InvalidError for all 422 Unprocessable Entity\n    responses.\n    \n    A 422 HTTP response from the server generally implies that the request\n    was well formed but the API was unable to process it because the \n    content was not semantically correct or meaningful per the API.\n    \n    For more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918\n    https://tools.ietf.org/html/rfc4918#section-11.2 \n\n    @method ajaxError\n    @param jqXHR\n    @returns error\n  */\n  ajaxError: function(jqXHR) {\n    var error = this._super(jqXHR);\n\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"],\n          errors = {};\n\n      forEach(Ember.keys(jsonErrors), function(key) {\n        errors[Ember.String.camelize(key)] = jsonErrors[key];\n      });\n\n      return new DS.InvalidError(errors);\n    } else {\n      return error;\n    }\n  }\n});\n\n})();\n//@ sourceURL=activemodel-adapter/system/active_model_adapter");