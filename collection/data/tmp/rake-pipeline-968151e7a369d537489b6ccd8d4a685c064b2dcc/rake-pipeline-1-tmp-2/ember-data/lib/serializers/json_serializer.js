minispade.register('ember-data/serializers/json_serializer', "(function() {var get = Ember.get, set = Ember.set, isNone = Ember.isNone;\n\n// Simple dispatcher to support overriding the aliased\n// method in subclasses.\nfunction aliasMethod(methodName) {\n  return function() {\n    return this[methodName].apply(this, arguments);\n  };\n}\n\nDS.JSONSerializer = Ember.Object.extend({\n  primaryKey: 'id',\n\n  applyTransforms: function(type, data) {\n    type.eachTransformedAttribute(function(key, type) {\n      var transform = this.transformFor(type);\n      data[key] = transform.deserialize(data[key]);\n    }, this);\n\n    return data;\n  },\n\n  normalize: function(type, hash) {\n    if (!hash) { return hash; }\n\n    this.applyTransforms(type, hash);\n    return hash;\n  },\n\n  // SERIALIZE\n\n  serialize: function(record, options) {\n    var json = {};\n\n    if (options && options.includeId) {\n      var id = get(record, 'id');\n\n      if (id) {\n        json[get(this, 'primaryKey')] = get(record, 'id');\n      }\n    }\n\n    record.eachAttribute(function(key, attribute) {\n      this.serializeAttribute(record, json, key, attribute);\n    }, this);\n\n    record.eachRelationship(function(key, relationship) {\n      if (relationship.kind === 'belongsTo') {\n        this.serializeBelongsTo(record, json, relationship);\n      } else if (relationship.kind === 'hasMany') {\n        this.serializeHasMany(record, json, relationship);\n      }\n    }, this);\n\n    return json;\n  },\n\n  serializeAttribute: function(record, json, key, attribute) {\n    var attrs = get(this, 'attrs');\n    var value = get(record, key), type = attribute.type;\n\n    if (type) {\n      var transform = this.transformFor(type);\n      value = transform.serialize(value);\n    }\n\n    // if provided, use the mapping provided by `attrs` in\n    // the serializer\n    key = attrs && attrs[key] || (this.keyForAttribute ? this.keyForAttribute(key) : key);\n\n    json[key] = value;\n  },\n\n  serializeBelongsTo: function(record, json, relationship) {\n    var key = relationship.key;\n\n    var belongsTo = get(record, key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\") : key;\n\n    if (isNone(belongsTo)) {\n      json[key] = belongsTo;\n    } else {\n      json[key] = get(belongsTo, 'id');\n    }\n\n    if (relationship.options.polymorphic) {\n      this.serializePolymorphicType(record, json, relationship);\n    }\n  },\n\n  serializeHasMany: function(record, json, relationship) {\n    var key = relationship.key;\n\n    var relationshipType = DS.RelationshipChange.determineRelationshipType(record.constructor, relationship);\n\n    if (relationshipType === 'manyToNone' || relationshipType === 'manyToMany') {\n      json[key] = get(record, key).mapBy('id');\n      // TODO support for polymorphic manyToNone and manyToMany relationships\n    }\n  },\n\n  /**\n    You can use this method to customize how polymorphic objects are serialized.\n\n    @method serializePolymorphicType\n    @param {DS.Model} record\n    @param {Object} json\n    @param relationship\n  */\n  serializePolymorphicType: Ember.K,\n\n  // EXTRACT\n\n  extract: function(store, type, payload, id, requestType) {\n    this.extractMeta(store, type, payload);\n\n    var specificExtract = \"extract\" + requestType.charAt(0).toUpperCase() + requestType.substr(1);\n    return this[specificExtract](store, type, payload, id, requestType);\n  },\n\n  extractFindAll: aliasMethod('extractArray'),\n  extractFindQuery: aliasMethod('extractArray'),\n  extractFindMany: aliasMethod('extractArray'),\n  extractFindHasMany: aliasMethod('extractArray'),\n\n  extractCreateRecord: aliasMethod('extractSave'),\n  extractUpdateRecord: aliasMethod('extractSave'),\n  extractDeleteRecord: aliasMethod('extractSave'),\n\n  extractFind: aliasMethod('extractSingle'),\n  extractFindBelongsTo: aliasMethod('extractSingle'),\n  extractSave: aliasMethod('extractSingle'),\n\n  extractSingle: function(store, type, payload) {\n    return this.normalize(type, payload);\n  },\n\n  extractArray: function(store, type, payload) {\n    return this.normalize(type, payload);\n  },\n\n  extractMeta: function(store, type, payload) {\n    if (payload && payload.meta) {\n      store.metaForType(type, payload.meta);\n      delete payload.meta;\n    }\n  },\n\n  // HELPERS\n\n  transformFor: function(attributeType, skipAssertion) {\n    var transform = this.container.lookup('transform:' + attributeType);\n    Ember.assert(\"Unable to find transform for '\" + attributeType + \"'\", skipAssertion || !!transform);\n    return transform;\n  }\n});\n\n})();\n//@ sourceURL=ember-data/serializers/json_serializer");