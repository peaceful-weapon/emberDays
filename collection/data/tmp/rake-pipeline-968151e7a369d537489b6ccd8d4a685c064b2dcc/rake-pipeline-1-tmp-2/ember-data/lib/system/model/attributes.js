minispade.register('ember-data/system/model/attributes', "(function() {minispade.require(\"ember-data/system/model/model\");\n\n/**\n  @module ember-data\n*/\n\nvar get = Ember.get;\n\n/**\n  @class Model\n  @namespace DS\n*/\nDS.Model.reopenClass({\n  attributes: Ember.computed(function() {\n    var map = Ember.Map.create();\n\n    this.eachComputedProperty(function(name, meta) {\n      if (meta.isAttribute) {\n        Ember.assert(\"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from \" + this.toString(), name !== 'id');\n\n        meta.name = name;\n        map.set(name, meta);\n      }\n    });\n\n    return map;\n  }),\n\n  transformedAttributes: Ember.computed(function() {\n    var map = Ember.Map.create();\n\n    this.eachAttribute(function(key, meta) {\n      if (meta.type) {\n        map.set(key, meta.type);\n      }\n    });\n\n    return map;\n  }),\n\n  eachAttribute: function(callback, binding) {\n    get(this, 'attributes').forEach(function(name, meta) {\n      callback.call(binding, name, meta);\n    }, binding);\n  },\n\n  eachTransformedAttribute: function(callback, binding) {\n    get(this, 'transformedAttributes').forEach(function(name, type) {\n      callback.call(binding, name, type);\n    });\n  }\n});\n\n\nDS.Model.reopen({\n  eachAttribute: function(callback, binding) {\n    this.constructor.eachAttribute(callback, binding);\n  }\n});\n\nfunction getDefaultValue(record, options, key) {\n  if (typeof options.defaultValue === \"function\") {\n    return options.defaultValue();\n  } else {\n    return options.defaultValue;\n  }\n}\n\nfunction hasValue(record, key) {\n  return record._attributes.hasOwnProperty(key) ||\n         record._inFlightAttributes.hasOwnProperty(key) ||\n         record._data.hasOwnProperty(key);\n}\n\nfunction getValue(record, key) {\n  if (record._attributes.hasOwnProperty(key)) {\n    return record._attributes[key];\n  } else if (record._inFlightAttributes.hasOwnProperty(key)) {\n    return record._inFlightAttributes[key];\n  } else {\n    return record._data[key];\n  }\n}\n\n/**\n  `DS.attr` defines an attribute on a DS.Model.\n  By default, attributes are passed through as-is, however you can specify an\n  optional type to have the value automatically transformed.\n  Ember Data ships with four basic transform types:\n    'string', 'number', 'boolean' and 'date'.\n  You can define your own transforms by subclassing DS.Transform.\n\n  DS.attr takes an optional hash as a second parameter, currently\n  supported options are:\n    'defaultValue': Pass a string or a function to be called to set the attribute\n                    to a default value if none is supplied.\n\n  @method attr\n  @param {String} type the attribute type\n  @param {Object} options a hash of options\n*/\n\nDS.attr = function(type, options) {\n  options = options || {};\n\n  var meta = {\n    type: type,\n    isAttribute: true,\n    options: options\n  };\n\n  return Ember.computed(function(key, value) {\n    if (arguments.length > 1) {\n      Ember.assert(\"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from \" + this.constructor.toString(), key !== 'id');\n      var oldValue = this._attributes[key] || this._inFlightAttributes[key] || this._data[key];\n      this.send('didSetProperty', { name: key, oldValue: oldValue, originalValue: this._data[key], value: value });\n      this._attributes[key] = value;\n      return value;\n    } else if (hasValue(this, key)) {\n      return getValue(this, key);\n    } else {\n      return getDefaultValue(this, options, key);\n    }\n\n  // `data` is never set directly. However, it may be\n  // invalidated from the state manager's setData\n  // event.\n  }).property('data').meta(meta);\n};\n\n\n})();\n//@ sourceURL=ember-data/system/model/attributes");