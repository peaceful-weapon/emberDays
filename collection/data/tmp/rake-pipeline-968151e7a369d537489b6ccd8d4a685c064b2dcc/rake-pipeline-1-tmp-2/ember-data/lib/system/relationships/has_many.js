minispade.register('ember-data/system/relationships/has_many', "(function() {minispade.require(\"ember-data/system/model/model\");\n\n/**\n  @module ember-data\n*/\n\nvar get = Ember.get, set = Ember.set, setProperties = Ember.setProperties;\n\nfunction asyncHasMany(type, options, meta) {\n  return Ember.computed(function(key, value) {\n    if (this._relationships[key]) { return this._relationships[key]; }\n\n    var resolver = Ember.RSVP.defer();\n\n    var relationship = buildRelationship(this, key, options, function(store, data) {\n      var link = data.links && data.links[key];\n\n      if (link) {\n        return store.findHasMany(this, link, meta, resolver);\n      } else {\n        return store.findMany(this, data[key], meta.type, resolver);\n      }\n    });\n\n    var promise = resolver.promise.then(function() {\n      return relationship;\n    });\n\n    return DS.PromiseArray.create({ promise: promise });\n  }).property('data').meta(meta);\n}\n\nfunction buildRelationship(record, key, options, callback) {\n  var rels = record._relationships;\n\n  if (rels[key]) { return rels[key]; }\n\n  var data = get(record, 'data'),\n      store = get(record, 'store');\n\n  var relationship = rels[key] = callback.call(record, store, data);\n\n  return setProperties(relationship, {\n    owner: record, name: key, isPolymorphic: options.polymorphic\n  });\n}\n\nfunction hasRelationship(type, options) {\n  options = options || {};\n\n  var meta = { type: type, isRelationship: true, options: options, kind: 'hasMany' };\n\n  if (options.async) {\n    return asyncHasMany(type, options, meta);\n  }\n\n  return Ember.computed(function(key, value) {\n    return buildRelationship(this, key, options, function(store, data) {\n      var records = data[key];\n      Ember.assert(\"You looked up the '\" + key + \"' relationship on '\" + this + \"' but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.hasMany({ async: true })`)\", Ember.A(records).everyProperty('isEmpty', false));\n      return store.findMany(this, data[key], meta.type);\n    });\n  }).property('data').meta(meta);\n}\n\nDS.hasMany = function(type, options) {\n  if (typeof type === 'object') {\n    options = type;\n    type = undefined;\n  }\n  return hasRelationship(type, options);\n};\n\n})();\n//@ sourceURL=ember-data/system/relationships/has_many");