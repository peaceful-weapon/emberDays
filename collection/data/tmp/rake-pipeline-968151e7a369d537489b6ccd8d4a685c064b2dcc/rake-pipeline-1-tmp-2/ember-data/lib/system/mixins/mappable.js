minispade.register('ember-data/system/mixins/mappable', "(function() {/**\n  @module ember-data\n*/\n\nvar get = Ember.get;\nvar forEach = Ember.ArrayPolyfills.forEach;\n\nvar resolveMapConflict = function(oldValue, newValue) {\n  return oldValue;\n};\n\nvar transformMapKey = function(key, value) {\n  return key;\n};\n\nvar transformMapValue = function(key, value) {\n  return value;\n};\n\n/**\n  The Mappable mixin is designed for classes that would like to\n  behave as a map for configuration purposes.\n\n  For example, the DS.Adapter class can behave like a map, with\n  more semantic API, via the `map` API:\n\n    DS.Adapter.map('App.Person', { firstName: { key: 'FIRST' } });\n\n  Class configuration via a map-like API has a few common requirements\n  that differentiate it from the standard Ember.Map implementation.\n\n  First, values often are provided as strings that should be normalized\n  into classes the first time the configuration options are used.\n\n  Second, the values configured on parent classes should also be taken\n  into account.\n\n  Finally, setting the value of a key sometimes should merge with the\n  previous value, rather than replacing it.\n\n  This mixin provides a instance method, `createInstanceMapFor`, that\n  will reify all of the configuration options set on an instance's\n  constructor and provide it for the instance to use.\n\n  Classes can implement certain hooks that allow them to customize\n  the requirements listed above:\n\n  * `resolveMapConflict` - called when a value is set for an existing\n    value\n  * `transformMapKey` - allows a key name (for example, a global path\n    to a class) to be normalized\n  * `transformMapValue` - allows a value (for example, a class that\n    should be instantiated) to be normalized\n\n  Classes that implement this mixin should also implement a class\n  method built using the `generateMapFunctionFor` method:\n\n    DS.Adapter.reopenClass({\n      map: DS.Mappable.generateMapFunctionFor('attributes', function(key, newValue, map) {\n        var existingValue = map.get(key);\n\n        for (var prop in newValue) {\n          if (!newValue.hasOwnProperty(prop)) { continue; }\n          existingValue[prop] = newValue[prop];\n        }\n      })\n    });\n\n  The function passed to `generateMapFunctionFor` is invoked every time a\n  new value is added to the map.\n\n  @class _Mappable\n  @private\n  @namespace DS\n**/\nDS._Mappable = Ember.Mixin.create({\n  createInstanceMapFor: function(mapName) {\n    var instanceMeta = getMappableMeta(this);\n\n    instanceMeta.values = instanceMeta.values || {};\n\n    if (instanceMeta.values[mapName]) { return instanceMeta.values[mapName]; }\n\n    var instanceMap = instanceMeta.values[mapName] = new Ember.Map();\n\n    var klass = this.constructor;\n\n    while (klass && klass !== DS.Store) {\n      this._copyMap(mapName, klass, instanceMap);\n      klass = klass.superclass;\n    }\n\n    instanceMeta.values[mapName] = instanceMap;\n    return instanceMap;\n  },\n\n  _copyMap: function(mapName, klass, instanceMap) {\n    var classMeta = getMappableMeta(klass);\n\n    var classMap = classMeta[mapName];\n    if (classMap) {\n      forEach.call(classMap, eachMap, this);\n    }\n\n    function eachMap(key, value) {\n      var transformedKey = (klass.transformMapKey || transformMapKey)(key, value);\n      var transformedValue = (klass.transformMapValue || transformMapValue)(key, value);\n\n      var oldValue = instanceMap.get(transformedKey);\n      var newValue = transformedValue;\n\n      if (oldValue) {\n        newValue = (this.constructor.resolveMapConflict || resolveMapConflict)(oldValue, newValue);\n      }\n\n      instanceMap.set(transformedKey, newValue);\n    }\n  }\n\n});\n\nDS._Mappable.generateMapFunctionFor = function(mapName, transform) {\n  return function(key, value) {\n    var meta = getMappableMeta(this);\n\n    var map = meta[mapName] || Ember.MapWithDefault.create({\n      defaultValue: function() { return {}; }\n    });\n\n    transform.call(this, key, value, map);\n\n    meta[mapName] = map;\n  };\n};\n\nfunction getMappableMeta(obj) {\n  var meta = Ember.meta(obj, true),\n      keyName = 'DS.Mappable',\n      value = meta[keyName];\n\n  if (!value) { meta[keyName] = {}; }\n\n  if (!meta.hasOwnProperty(keyName)) {\n    meta[keyName] = Ember.create(meta[keyName]);\n  }\n\n  return meta[keyName];\n}\n\n})();\n//@ sourceURL=ember-data/system/mixins/mappable");